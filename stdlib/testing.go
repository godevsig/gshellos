// Code generated by 'yaegi extract testing'. DO NOT EDIT.

// +build go1.16,!go1.17,stdtesting

package stdlib

import (
	"reflect"
	"testing"
)

func init() {
	Symbols["testing/testing"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AllocsPerRun":  reflect.ValueOf(testing.AllocsPerRun),
		"Benchmark":     reflect.ValueOf(testing.Benchmark),
		"CoverMode":     reflect.ValueOf(testing.CoverMode),
		"Coverage":      reflect.ValueOf(testing.Coverage),
		"Init":          reflect.ValueOf(testing.Init),
		"Main":          reflect.ValueOf(testing.Main),
		"MainStart":     reflect.ValueOf(testing.MainStart),
		"RegisterCover": reflect.ValueOf(testing.RegisterCover),
		"RunBenchmarks": reflect.ValueOf(testing.RunBenchmarks),
		"RunExamples":   reflect.ValueOf(testing.RunExamples),
		"RunTests":      reflect.ValueOf(testing.RunTests),
		"Short":         reflect.ValueOf(testing.Short),
		"Verbose":       reflect.ValueOf(testing.Verbose),

		// type definitions
		"B":                 reflect.ValueOf((*testing.B)(nil)),
		"BenchmarkResult":   reflect.ValueOf((*testing.BenchmarkResult)(nil)),
		"Cover":             reflect.ValueOf((*testing.Cover)(nil)),
		"CoverBlock":        reflect.ValueOf((*testing.CoverBlock)(nil)),
		"InternalBenchmark": reflect.ValueOf((*testing.InternalBenchmark)(nil)),
		"InternalExample":   reflect.ValueOf((*testing.InternalExample)(nil)),
		"InternalTest":      reflect.ValueOf((*testing.InternalTest)(nil)),
		"M":                 reflect.ValueOf((*testing.M)(nil)),
		"PB":                reflect.ValueOf((*testing.PB)(nil)),
		"T":                 reflect.ValueOf((*testing.T)(nil)),
		"TB":                reflect.ValueOf((*testing.TB)(nil)),

		// interface wrapper definitions
		"_TB": reflect.ValueOf((*_testing_TB)(nil)),
	}
}

// _testing_TB is an interface wrapper for TB type
type _testing_TB struct {
	IValue   interface{}
	WCleanup func(a0 func())
	WError   func(args ...interface{})
	WErrorf  func(format string, args ...interface{})
	WFail    func()
	WFailNow func()
	WFailed  func() (r0 bool)
	WFatal   func(args ...interface{})
	WFatalf  func(format string, args ...interface{})
	WHelper  func()
	WLog     func(args ...interface{})
	WLogf    func(format string, args ...interface{})
	WName    func() (r0 string)
	WSkip    func(args ...interface{})
	WSkipNow func()
	WSkipf   func(format string, args ...interface{})
	WSkipped func() (r0 bool)
	WTempDir func() (r0 string)
}

func (W _testing_TB) Cleanup(a0 func()) {
	if W.WCleanup == nil {
		return
	}
	W.WCleanup(a0)
}
func (W _testing_TB) Error(args ...interface{}) {
	if W.WError == nil {
		return
	}
	W.WError(args...)
}
func (W _testing_TB) Errorf(format string, args ...interface{}) {
	if W.WErrorf == nil {
		return
	}
	W.WErrorf(format, args...)
}
func (W _testing_TB) Fail() {
	if W.WFail == nil {
		return
	}
	W.WFail()
}
func (W _testing_TB) FailNow() {
	if W.WFailNow == nil {
		return
	}
	W.WFailNow()
}
func (W _testing_TB) Failed() (r0 bool) {
	if W.WFailed == nil {
		return
	}
	return W.WFailed()
}
func (W _testing_TB) Fatal(args ...interface{}) {
	if W.WFatal == nil {
		return
	}
	W.WFatal(args...)
}
func (W _testing_TB) Fatalf(format string, args ...interface{}) {
	if W.WFatalf == nil {
		return
	}
	W.WFatalf(format, args...)
}
func (W _testing_TB) Helper() {
	if W.WHelper == nil {
		return
	}
	W.WHelper()
}
func (W _testing_TB) Log(args ...interface{}) {
	if W.WLog == nil {
		return
	}
	W.WLog(args...)
}
func (W _testing_TB) Logf(format string, args ...interface{}) {
	if W.WLogf == nil {
		return
	}
	W.WLogf(format, args...)
}
func (W _testing_TB) Name() (r0 string) {
	if W.WName == nil {
		return
	}
	return W.WName()
}
func (W _testing_TB) Skip(args ...interface{}) {
	if W.WSkip == nil {
		return
	}
	W.WSkip(args...)
}
func (W _testing_TB) SkipNow() {
	if W.WSkipNow == nil {
		return
	}
	W.WSkipNow()
}
func (W _testing_TB) Skipf(format string, args ...interface{}) {
	if W.WSkipf == nil {
		return
	}
	W.WSkipf(format, args...)
}
func (W _testing_TB) Skipped() (r0 bool) {
	if W.WSkipped == nil {
		return
	}
	return W.WSkipped()
}
func (W _testing_TB) TempDir() (r0 string) {
	if W.WTempDir == nil {
		return
	}
	return W.WTempDir()
}
