// Code generated by 'yaegi extract reflect'. DO NOT EDIT.

// +build go1.16,!go1.17,stdbase

package stdlib

import (
	"reflect"
)

func init() {
	Symbols["reflect/reflect"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Append":          reflect.ValueOf(reflect.Append),
		"AppendSlice":     reflect.ValueOf(reflect.AppendSlice),
		"Array":           reflect.ValueOf(reflect.Array),
		"ArrayOf":         reflect.ValueOf(reflect.ArrayOf),
		"Bool":            reflect.ValueOf(reflect.Bool),
		"BothDir":         reflect.ValueOf(reflect.BothDir),
		"Chan":            reflect.ValueOf(reflect.Chan),
		"ChanOf":          reflect.ValueOf(reflect.ChanOf),
		"Complex128":      reflect.ValueOf(reflect.Complex128),
		"Complex64":       reflect.ValueOf(reflect.Complex64),
		"Copy":            reflect.ValueOf(reflect.Copy),
		"DeepEqual":       reflect.ValueOf(reflect.DeepEqual),
		"Float32":         reflect.ValueOf(reflect.Float32),
		"Float64":         reflect.ValueOf(reflect.Float64),
		"Func":            reflect.ValueOf(reflect.Func),
		"FuncOf":          reflect.ValueOf(reflect.FuncOf),
		"Indirect":        reflect.ValueOf(reflect.Indirect),
		"Int":             reflect.ValueOf(reflect.Int),
		"Int16":           reflect.ValueOf(reflect.Int16),
		"Int32":           reflect.ValueOf(reflect.Int32),
		"Int64":           reflect.ValueOf(reflect.Int64),
		"Int8":            reflect.ValueOf(reflect.Int8),
		"Interface":       reflect.ValueOf(reflect.Interface),
		"Invalid":         reflect.ValueOf(reflect.Invalid),
		"MakeChan":        reflect.ValueOf(reflect.MakeChan),
		"MakeFunc":        reflect.ValueOf(reflect.MakeFunc),
		"MakeMap":         reflect.ValueOf(reflect.MakeMap),
		"MakeMapWithSize": reflect.ValueOf(reflect.MakeMapWithSize),
		"MakeSlice":       reflect.ValueOf(reflect.MakeSlice),
		"Map":             reflect.ValueOf(reflect.Map),
		"MapOf":           reflect.ValueOf(reflect.MapOf),
		"New":             reflect.ValueOf(reflect.New),
		"NewAt":           reflect.ValueOf(reflect.NewAt),
		"Ptr":             reflect.ValueOf(reflect.Ptr),
		"PtrTo":           reflect.ValueOf(reflect.PtrTo),
		"RecvDir":         reflect.ValueOf(reflect.RecvDir),
		"Select":          reflect.ValueOf(reflect.Select),
		"SelectDefault":   reflect.ValueOf(reflect.SelectDefault),
		"SelectRecv":      reflect.ValueOf(reflect.SelectRecv),
		"SelectSend":      reflect.ValueOf(reflect.SelectSend),
		"SendDir":         reflect.ValueOf(reflect.SendDir),
		"Slice":           reflect.ValueOf(reflect.Slice),
		"SliceOf":         reflect.ValueOf(reflect.SliceOf),
		"String":          reflect.ValueOf(reflect.String),
		"Struct":          reflect.ValueOf(reflect.Struct),
		"StructOf":        reflect.ValueOf(reflect.StructOf),
		"Swapper":         reflect.ValueOf(reflect.Swapper),
		"TypeOf":          reflect.ValueOf(reflect.TypeOf),
		"Uint":            reflect.ValueOf(reflect.Uint),
		"Uint16":          reflect.ValueOf(reflect.Uint16),
		"Uint32":          reflect.ValueOf(reflect.Uint32),
		"Uint64":          reflect.ValueOf(reflect.Uint64),
		"Uint8":           reflect.ValueOf(reflect.Uint8),
		"Uintptr":         reflect.ValueOf(reflect.Uintptr),
		"UnsafePointer":   reflect.ValueOf(reflect.UnsafePointer),
		"ValueOf":         reflect.ValueOf(reflect.ValueOf),
		"Zero":            reflect.ValueOf(reflect.Zero),

		// type definitions
		"ChanDir":      reflect.ValueOf((*reflect.ChanDir)(nil)),
		"Kind":         reflect.ValueOf((*reflect.Kind)(nil)),
		"MapIter":      reflect.ValueOf((*reflect.MapIter)(nil)),
		"Method":       reflect.ValueOf((*reflect.Method)(nil)),
		"SelectCase":   reflect.ValueOf((*reflect.SelectCase)(nil)),
		"SelectDir":    reflect.ValueOf((*reflect.SelectDir)(nil)),
		"SliceHeader":  reflect.ValueOf((*reflect.SliceHeader)(nil)),
		"StringHeader": reflect.ValueOf((*reflect.StringHeader)(nil)),
		"StructField":  reflect.ValueOf((*reflect.StructField)(nil)),
		"StructTag":    reflect.ValueOf((*reflect.StructTag)(nil)),
		"Type":         reflect.ValueOf((*reflect.Type)(nil)),
		"Value":        reflect.ValueOf((*reflect.Value)(nil)),
		"ValueError":   reflect.ValueOf((*reflect.ValueError)(nil)),

		// interface wrapper definitions
		"_Type": reflect.ValueOf((*_reflect_Type)(nil)),
	}
}

// _reflect_Type is an interface wrapper for Type type
type _reflect_Type struct {
	IValue           interface{}
	WAlign           func() (r0 int)
	WAssignableTo    func(u reflect.Type) (r0 bool)
	WBits            func() (r0 int)
	WChanDir         func() (r0 reflect.ChanDir)
	WComparable      func() (r0 bool)
	WConvertibleTo   func(u reflect.Type) (r0 bool)
	WElem            func() (r0 reflect.Type)
	WField           func(i int) (r0 reflect.StructField)
	WFieldAlign      func() (r0 int)
	WFieldByIndex    func(index []int) (r0 reflect.StructField)
	WFieldByName     func(name string) (r0 reflect.StructField, r1 bool)
	WFieldByNameFunc func(match func(string) bool) (r0 reflect.StructField, r1 bool)
	WImplements      func(u reflect.Type) (r0 bool)
	WIn              func(i int) (r0 reflect.Type)
	WIsVariadic      func() (r0 bool)
	WKey             func() (r0 reflect.Type)
	WKind            func() (r0 reflect.Kind)
	WLen             func() (r0 int)
	WMethod          func(a0 int) (r0 reflect.Method)
	WMethodByName    func(a0 string) (r0 reflect.Method, r1 bool)
	WName            func() (r0 string)
	WNumField        func() (r0 int)
	WNumIn           func() (r0 int)
	WNumMethod       func() (r0 int)
	WNumOut          func() (r0 int)
	WOut             func(i int) (r0 reflect.Type)
	WPkgPath         func() (r0 string)
	WSize            func() (r0 uintptr)
	WString          func() (r0 string)
}

func (W _reflect_Type) Align() (r0 int) {
	if W.WAlign == nil {
		return
	}
	return W.WAlign()
}
func (W _reflect_Type) AssignableTo(u reflect.Type) (r0 bool) {
	if W.WAssignableTo == nil {
		return
	}
	return W.WAssignableTo(u)
}
func (W _reflect_Type) Bits() (r0 int) {
	if W.WBits == nil {
		return
	}
	return W.WBits()
}
func (W _reflect_Type) ChanDir() (r0 reflect.ChanDir) {
	if W.WChanDir == nil {
		return
	}
	return W.WChanDir()
}
func (W _reflect_Type) Comparable() (r0 bool) {
	if W.WComparable == nil {
		return
	}
	return W.WComparable()
}
func (W _reflect_Type) ConvertibleTo(u reflect.Type) (r0 bool) {
	if W.WConvertibleTo == nil {
		return
	}
	return W.WConvertibleTo(u)
}
func (W _reflect_Type) Elem() (r0 reflect.Type) {
	if W.WElem == nil {
		return
	}
	return W.WElem()
}
func (W _reflect_Type) Field(i int) (r0 reflect.StructField) {
	if W.WField == nil {
		return
	}
	return W.WField(i)
}
func (W _reflect_Type) FieldAlign() (r0 int) {
	if W.WFieldAlign == nil {
		return
	}
	return W.WFieldAlign()
}
func (W _reflect_Type) FieldByIndex(index []int) (r0 reflect.StructField) {
	if W.WFieldByIndex == nil {
		return
	}
	return W.WFieldByIndex(index)
}
func (W _reflect_Type) FieldByName(name string) (r0 reflect.StructField, r1 bool) {
	if W.WFieldByName == nil {
		return
	}
	return W.WFieldByName(name)
}
func (W _reflect_Type) FieldByNameFunc(match func(string) bool) (r0 reflect.StructField, r1 bool) {
	if W.WFieldByNameFunc == nil {
		return
	}
	return W.WFieldByNameFunc(match)
}
func (W _reflect_Type) Implements(u reflect.Type) (r0 bool) {
	if W.WImplements == nil {
		return
	}
	return W.WImplements(u)
}
func (W _reflect_Type) In(i int) (r0 reflect.Type) {
	if W.WIn == nil {
		return
	}
	return W.WIn(i)
}
func (W _reflect_Type) IsVariadic() (r0 bool) {
	if W.WIsVariadic == nil {
		return
	}
	return W.WIsVariadic()
}
func (W _reflect_Type) Key() (r0 reflect.Type) {
	if W.WKey == nil {
		return
	}
	return W.WKey()
}
func (W _reflect_Type) Kind() (r0 reflect.Kind) {
	if W.WKind == nil {
		return
	}
	return W.WKind()
}
func (W _reflect_Type) Len() (r0 int) {
	if W.WLen == nil {
		return
	}
	return W.WLen()
}
func (W _reflect_Type) Method(a0 int) (r0 reflect.Method) {
	if W.WMethod == nil {
		return
	}
	return W.WMethod(a0)
}
func (W _reflect_Type) MethodByName(a0 string) (r0 reflect.Method, r1 bool) {
	if W.WMethodByName == nil {
		return
	}
	return W.WMethodByName(a0)
}
func (W _reflect_Type) Name() (r0 string) {
	if W.WName == nil {
		return
	}
	return W.WName()
}
func (W _reflect_Type) NumField() (r0 int) {
	if W.WNumField == nil {
		return
	}
	return W.WNumField()
}
func (W _reflect_Type) NumIn() (r0 int) {
	if W.WNumIn == nil {
		return
	}
	return W.WNumIn()
}
func (W _reflect_Type) NumMethod() (r0 int) {
	if W.WNumMethod == nil {
		return
	}
	return W.WNumMethod()
}
func (W _reflect_Type) NumOut() (r0 int) {
	if W.WNumOut == nil {
		return
	}
	return W.WNumOut()
}
func (W _reflect_Type) Out(i int) (r0 reflect.Type) {
	if W.WOut == nil {
		return
	}
	return W.WOut(i)
}
func (W _reflect_Type) PkgPath() (r0 string) {
	if W.WPkgPath == nil {
		return
	}
	return W.WPkgPath()
}
func (W _reflect_Type) Size() (r0 uintptr) {
	if W.WSize == nil {
		return
	}
	return W.WSize()
}
func (W _reflect_Type) String() (r0 string) {
	if W.WString == nil {
		return
	}
	return W.WString()
}
