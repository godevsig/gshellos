// Code generated by 'yaegi extract container/heap'. DO NOT EDIT.

// +build go1.16,!go1.17,stdcontainer

package stdlib

import (
	"container/heap"
	"reflect"
)

func init() {
	Symbols["container/heap/heap"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Fix":    reflect.ValueOf(heap.Fix),
		"Init":   reflect.ValueOf(heap.Init),
		"Pop":    reflect.ValueOf(heap.Pop),
		"Push":   reflect.ValueOf(heap.Push),
		"Remove": reflect.ValueOf(heap.Remove),

		// type definitions
		"Interface": reflect.ValueOf((*heap.Interface)(nil)),

		// interface wrapper definitions
		"_Interface": reflect.ValueOf((*_container_heap_Interface)(nil)),
	}
}

// _container_heap_Interface is an interface wrapper for Interface type
type _container_heap_Interface struct {
	IValue interface{}
	WLen   func() (r0 int)
	WLess  func(i int, j int) (r0 bool)
	WPop   func() (r0 interface{})
	WPush  func(x interface{})
	WSwap  func(i int, j int)
}

func (W _container_heap_Interface) Len() (r0 int) {
	if W.WLen == nil {
		return
	}
	return W.WLen()
}
func (W _container_heap_Interface) Less(i int, j int) (r0 bool) {
	if W.WLess == nil {
		return
	}
	return W.WLess(i, j)
}
func (W _container_heap_Interface) Pop() (r0 interface{}) {
	if W.WPop == nil {
		return
	}
	return W.WPop()
}
func (W _container_heap_Interface) Push(x interface{}) {
	if W.WPush == nil {
		return
	}
	W.WPush(x)
}
func (W _container_heap_Interface) Swap(i int, j int) {
	if W.WSwap == nil {
		return
	}
	W.WSwap(i, j)
}
