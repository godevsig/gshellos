// Code generated by 'yaegi extract hash'. DO NOT EDIT.

// +build go1.16,!go1.17,stdhash

package stdlib

import (
	"hash"
	"reflect"
)

func init() {
	Symbols["hash/hash"] = map[string]reflect.Value{
		// type definitions
		"Hash":   reflect.ValueOf((*hash.Hash)(nil)),
		"Hash32": reflect.ValueOf((*hash.Hash32)(nil)),
		"Hash64": reflect.ValueOf((*hash.Hash64)(nil)),

		// interface wrapper definitions
		"_Hash":   reflect.ValueOf((*_hash_Hash)(nil)),
		"_Hash32": reflect.ValueOf((*_hash_Hash32)(nil)),
		"_Hash64": reflect.ValueOf((*_hash_Hash64)(nil)),
	}
}

// _hash_Hash is an interface wrapper for Hash type
type _hash_Hash struct {
	IValue     interface{}
	WBlockSize func() (r0 int)
	WReset     func()
	WSize      func() (r0 int)
	WSum       func(b []byte) (r0 []byte)
	WWrite     func(p []byte) (n int, err error)
}

func (W _hash_Hash) BlockSize() (r0 int) {
	if W.WBlockSize == nil {
		return
	}
	return W.WBlockSize()
}
func (W _hash_Hash) Reset() {
	if W.WReset == nil {
		return
	}
	W.WReset()
}
func (W _hash_Hash) Size() (r0 int) {
	if W.WSize == nil {
		return
	}
	return W.WSize()
}
func (W _hash_Hash) Sum(b []byte) (r0 []byte) {
	if W.WSum == nil {
		return
	}
	return W.WSum(b)
}
func (W _hash_Hash) Write(p []byte) (n int, err error) {
	if W.WWrite == nil {
		return
	}
	return W.WWrite(p)
}

// _hash_Hash32 is an interface wrapper for Hash32 type
type _hash_Hash32 struct {
	IValue     interface{}
	WBlockSize func() (r0 int)
	WReset     func()
	WSize      func() (r0 int)
	WSum       func(b []byte) (r0 []byte)
	WSum32     func() (r0 uint32)
	WWrite     func(p []byte) (n int, err error)
}

func (W _hash_Hash32) BlockSize() (r0 int) {
	if W.WBlockSize == nil {
		return
	}
	return W.WBlockSize()
}
func (W _hash_Hash32) Reset() {
	if W.WReset == nil {
		return
	}
	W.WReset()
}
func (W _hash_Hash32) Size() (r0 int) {
	if W.WSize == nil {
		return
	}
	return W.WSize()
}
func (W _hash_Hash32) Sum(b []byte) (r0 []byte) {
	if W.WSum == nil {
		return
	}
	return W.WSum(b)
}
func (W _hash_Hash32) Sum32() (r0 uint32) {
	if W.WSum32 == nil {
		return
	}
	return W.WSum32()
}
func (W _hash_Hash32) Write(p []byte) (n int, err error) {
	if W.WWrite == nil {
		return
	}
	return W.WWrite(p)
}

// _hash_Hash64 is an interface wrapper for Hash64 type
type _hash_Hash64 struct {
	IValue     interface{}
	WBlockSize func() (r0 int)
	WReset     func()
	WSize      func() (r0 int)
	WSum       func(b []byte) (r0 []byte)
	WSum64     func() (r0 uint64)
	WWrite     func(p []byte) (n int, err error)
}

func (W _hash_Hash64) BlockSize() (r0 int) {
	if W.WBlockSize == nil {
		return
	}
	return W.WBlockSize()
}
func (W _hash_Hash64) Reset() {
	if W.WReset == nil {
		return
	}
	W.WReset()
}
func (W _hash_Hash64) Size() (r0 int) {
	if W.WSize == nil {
		return
	}
	return W.WSize()
}
func (W _hash_Hash64) Sum(b []byte) (r0 []byte) {
	if W.WSum == nil {
		return
	}
	return W.WSum(b)
}
func (W _hash_Hash64) Sum64() (r0 uint64) {
	if W.WSum64 == nil {
		return
	}
	return W.WSum64()
}
func (W _hash_Hash64) Write(p []byte) (n int, err error) {
	if W.WWrite == nil {
		return
	}
	return W.WWrite(p)
}
