// Code generated by 'yaegi extract io/fs'. DO NOT EDIT.

// +build go1.16,!go1.17,stdbase

package stdlib

import (
	"io/fs"
	"reflect"
	"time"
)

func init() {
	Symbols["io/fs/fs"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ErrClosed":      reflect.ValueOf(&fs.ErrClosed).Elem(),
		"ErrExist":       reflect.ValueOf(&fs.ErrExist).Elem(),
		"ErrInvalid":     reflect.ValueOf(&fs.ErrInvalid).Elem(),
		"ErrNotExist":    reflect.ValueOf(&fs.ErrNotExist).Elem(),
		"ErrPermission":  reflect.ValueOf(&fs.ErrPermission).Elem(),
		"Glob":           reflect.ValueOf(fs.Glob),
		"ModeAppend":     reflect.ValueOf(fs.ModeAppend),
		"ModeCharDevice": reflect.ValueOf(fs.ModeCharDevice),
		"ModeDevice":     reflect.ValueOf(fs.ModeDevice),
		"ModeDir":        reflect.ValueOf(fs.ModeDir),
		"ModeExclusive":  reflect.ValueOf(fs.ModeExclusive),
		"ModeIrregular":  reflect.ValueOf(fs.ModeIrregular),
		"ModeNamedPipe":  reflect.ValueOf(fs.ModeNamedPipe),
		"ModePerm":       reflect.ValueOf(fs.ModePerm),
		"ModeSetgid":     reflect.ValueOf(fs.ModeSetgid),
		"ModeSetuid":     reflect.ValueOf(fs.ModeSetuid),
		"ModeSocket":     reflect.ValueOf(fs.ModeSocket),
		"ModeSticky":     reflect.ValueOf(fs.ModeSticky),
		"ModeSymlink":    reflect.ValueOf(fs.ModeSymlink),
		"ModeTemporary":  reflect.ValueOf(fs.ModeTemporary),
		"ModeType":       reflect.ValueOf(fs.ModeType),
		"ReadDir":        reflect.ValueOf(fs.ReadDir),
		"ReadFile":       reflect.ValueOf(fs.ReadFile),
		"SkipDir":        reflect.ValueOf(&fs.SkipDir).Elem(),
		"Stat":           reflect.ValueOf(fs.Stat),
		"Sub":            reflect.ValueOf(fs.Sub),
		"ValidPath":      reflect.ValueOf(fs.ValidPath),
		"WalkDir":        reflect.ValueOf(fs.WalkDir),

		// type definitions
		"DirEntry":    reflect.ValueOf((*fs.DirEntry)(nil)),
		"FS":          reflect.ValueOf((*fs.FS)(nil)),
		"File":        reflect.ValueOf((*fs.File)(nil)),
		"FileInfo":    reflect.ValueOf((*fs.FileInfo)(nil)),
		"FileMode":    reflect.ValueOf((*fs.FileMode)(nil)),
		"GlobFS":      reflect.ValueOf((*fs.GlobFS)(nil)),
		"PathError":   reflect.ValueOf((*fs.PathError)(nil)),
		"ReadDirFS":   reflect.ValueOf((*fs.ReadDirFS)(nil)),
		"ReadDirFile": reflect.ValueOf((*fs.ReadDirFile)(nil)),
		"ReadFileFS":  reflect.ValueOf((*fs.ReadFileFS)(nil)),
		"StatFS":      reflect.ValueOf((*fs.StatFS)(nil)),
		"SubFS":       reflect.ValueOf((*fs.SubFS)(nil)),
		"WalkDirFunc": reflect.ValueOf((*fs.WalkDirFunc)(nil)),

		// interface wrapper definitions
		"_DirEntry":    reflect.ValueOf((*_io_fs_DirEntry)(nil)),
		"_FS":          reflect.ValueOf((*_io_fs_FS)(nil)),
		"_File":        reflect.ValueOf((*_io_fs_File)(nil)),
		"_FileInfo":    reflect.ValueOf((*_io_fs_FileInfo)(nil)),
		"_GlobFS":      reflect.ValueOf((*_io_fs_GlobFS)(nil)),
		"_ReadDirFS":   reflect.ValueOf((*_io_fs_ReadDirFS)(nil)),
		"_ReadDirFile": reflect.ValueOf((*_io_fs_ReadDirFile)(nil)),
		"_ReadFileFS":  reflect.ValueOf((*_io_fs_ReadFileFS)(nil)),
		"_StatFS":      reflect.ValueOf((*_io_fs_StatFS)(nil)),
		"_SubFS":       reflect.ValueOf((*_io_fs_SubFS)(nil)),
	}
}

// _io_fs_DirEntry is an interface wrapper for DirEntry type
type _io_fs_DirEntry struct {
	IValue interface{}
	WInfo  func() (r0 fs.FileInfo, r1 error)
	WIsDir func() (r0 bool)
	WName  func() (r0 string)
	WType  func() (r0 fs.FileMode)
}

func (W _io_fs_DirEntry) Info() (r0 fs.FileInfo, r1 error) {
	if W.WInfo == nil {
		return
	}
	return W.WInfo()
}
func (W _io_fs_DirEntry) IsDir() (r0 bool) {
	if W.WIsDir == nil {
		return
	}
	return W.WIsDir()
}
func (W _io_fs_DirEntry) Name() (r0 string) {
	if W.WName == nil {
		return
	}
	return W.WName()
}
func (W _io_fs_DirEntry) Type() (r0 fs.FileMode) {
	if W.WType == nil {
		return
	}
	return W.WType()
}

// _io_fs_FS is an interface wrapper for FS type
type _io_fs_FS struct {
	IValue interface{}
	WOpen  func(name string) (r0 fs.File, r1 error)
}

func (W _io_fs_FS) Open(name string) (r0 fs.File, r1 error) {
	if W.WOpen == nil {
		return
	}
	return W.WOpen(name)
}

// _io_fs_File is an interface wrapper for File type
type _io_fs_File struct {
	IValue interface{}
	WClose func() (r0 error)
	WRead  func(a0 []byte) (r0 int, r1 error)
	WStat  func() (r0 fs.FileInfo, r1 error)
}

func (W _io_fs_File) Close() (r0 error) {
	if W.WClose == nil {
		return
	}
	return W.WClose()
}
func (W _io_fs_File) Read(a0 []byte) (r0 int, r1 error) {
	if W.WRead == nil {
		return
	}
	return W.WRead(a0)
}
func (W _io_fs_File) Stat() (r0 fs.FileInfo, r1 error) {
	if W.WStat == nil {
		return
	}
	return W.WStat()
}

// _io_fs_FileInfo is an interface wrapper for FileInfo type
type _io_fs_FileInfo struct {
	IValue   interface{}
	WIsDir   func() (r0 bool)
	WModTime func() (r0 time.Time)
	WMode    func() (r0 fs.FileMode)
	WName    func() (r0 string)
	WSize    func() (r0 int64)
	WSys     func() (r0 interface{})
}

func (W _io_fs_FileInfo) IsDir() (r0 bool) {
	if W.WIsDir == nil {
		return
	}
	return W.WIsDir()
}
func (W _io_fs_FileInfo) ModTime() (r0 time.Time) {
	if W.WModTime == nil {
		return
	}
	return W.WModTime()
}
func (W _io_fs_FileInfo) Mode() (r0 fs.FileMode) {
	if W.WMode == nil {
		return
	}
	return W.WMode()
}
func (W _io_fs_FileInfo) Name() (r0 string) {
	if W.WName == nil {
		return
	}
	return W.WName()
}
func (W _io_fs_FileInfo) Size() (r0 int64) {
	if W.WSize == nil {
		return
	}
	return W.WSize()
}
func (W _io_fs_FileInfo) Sys() (r0 interface{}) {
	if W.WSys == nil {
		return
	}
	return W.WSys()
}

// _io_fs_GlobFS is an interface wrapper for GlobFS type
type _io_fs_GlobFS struct {
	IValue interface{}
	WGlob  func(pattern string) (r0 []string, r1 error)
	WOpen  func(name string) (r0 fs.File, r1 error)
}

func (W _io_fs_GlobFS) Glob(pattern string) (r0 []string, r1 error) {
	if W.WGlob == nil {
		return
	}
	return W.WGlob(pattern)
}
func (W _io_fs_GlobFS) Open(name string) (r0 fs.File, r1 error) {
	if W.WOpen == nil {
		return
	}
	return W.WOpen(name)
}

// _io_fs_ReadDirFS is an interface wrapper for ReadDirFS type
type _io_fs_ReadDirFS struct {
	IValue   interface{}
	WOpen    func(name string) (r0 fs.File, r1 error)
	WReadDir func(name string) (r0 []fs.DirEntry, r1 error)
}

func (W _io_fs_ReadDirFS) Open(name string) (r0 fs.File, r1 error) {
	if W.WOpen == nil {
		return
	}
	return W.WOpen(name)
}
func (W _io_fs_ReadDirFS) ReadDir(name string) (r0 []fs.DirEntry, r1 error) {
	if W.WReadDir == nil {
		return
	}
	return W.WReadDir(name)
}

// _io_fs_ReadDirFile is an interface wrapper for ReadDirFile type
type _io_fs_ReadDirFile struct {
	IValue   interface{}
	WClose   func() (r0 error)
	WRead    func(a0 []byte) (r0 int, r1 error)
	WReadDir func(n int) (r0 []fs.DirEntry, r1 error)
	WStat    func() (r0 fs.FileInfo, r1 error)
}

func (W _io_fs_ReadDirFile) Close() (r0 error) {
	if W.WClose == nil {
		return
	}
	return W.WClose()
}
func (W _io_fs_ReadDirFile) Read(a0 []byte) (r0 int, r1 error) {
	if W.WRead == nil {
		return
	}
	return W.WRead(a0)
}
func (W _io_fs_ReadDirFile) ReadDir(n int) (r0 []fs.DirEntry, r1 error) {
	if W.WReadDir == nil {
		return
	}
	return W.WReadDir(n)
}
func (W _io_fs_ReadDirFile) Stat() (r0 fs.FileInfo, r1 error) {
	if W.WStat == nil {
		return
	}
	return W.WStat()
}

// _io_fs_ReadFileFS is an interface wrapper for ReadFileFS type
type _io_fs_ReadFileFS struct {
	IValue    interface{}
	WOpen     func(name string) (r0 fs.File, r1 error)
	WReadFile func(name string) (r0 []byte, r1 error)
}

func (W _io_fs_ReadFileFS) Open(name string) (r0 fs.File, r1 error) {
	if W.WOpen == nil {
		return
	}
	return W.WOpen(name)
}
func (W _io_fs_ReadFileFS) ReadFile(name string) (r0 []byte, r1 error) {
	if W.WReadFile == nil {
		return
	}
	return W.WReadFile(name)
}

// _io_fs_StatFS is an interface wrapper for StatFS type
type _io_fs_StatFS struct {
	IValue interface{}
	WOpen  func(name string) (r0 fs.File, r1 error)
	WStat  func(name string) (r0 fs.FileInfo, r1 error)
}

func (W _io_fs_StatFS) Open(name string) (r0 fs.File, r1 error) {
	if W.WOpen == nil {
		return
	}
	return W.WOpen(name)
}
func (W _io_fs_StatFS) Stat(name string) (r0 fs.FileInfo, r1 error) {
	if W.WStat == nil {
		return
	}
	return W.WStat(name)
}

// _io_fs_SubFS is an interface wrapper for SubFS type
type _io_fs_SubFS struct {
	IValue interface{}
	WOpen  func(name string) (r0 fs.File, r1 error)
	WSub   func(dir string) (r0 fs.FS, r1 error)
}

func (W _io_fs_SubFS) Open(name string) (r0 fs.File, r1 error) {
	if W.WOpen == nil {
		return
	}
	return W.WOpen(name)
}
func (W _io_fs_SubFS) Sub(dir string) (r0 fs.FS, r1 error) {
	if W.WSub == nil {
		return
	}
	return W.WSub(dir)
}
